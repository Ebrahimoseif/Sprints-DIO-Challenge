
DIO_Challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000396  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000396  0000042a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800062  00800062  0000042c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000045c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001798  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009cb  00000000  00000000  00001db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ac6  00000000  00000000  00002783  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ac  00000000  00000000  0000324c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000be9  00000000  00000000  000035f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001033  00000000  00000000  000041e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000168  00000000  00000000  00005214  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__vector_10>
  2c:	0c 94 ac 00 	jmp	0x158	; 0x158 <__vector_11>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  54:	27 01       	movw	r4, r14
  56:	4c 01       	movw	r8, r24
  58:	2c 01       	movw	r4, r24
  5a:	32 01       	movw	r6, r4
  5c:	38 01       	movw	r6, r16
  5e:	3e 01       	movw	r6, r28
  60:	44 01       	movw	r8, r8
  62:	47 01       	movw	r8, r14

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
  70:	10 e0       	ldi	r17, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	e6 e9       	ldi	r30, 0x96	; 150
  78:	f3 e0       	ldi	r31, 0x03	; 3
  7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
  7c:	05 90       	lpm	r0, Z+
  7e:	0d 92       	st	X+, r0
  80:	a2 36       	cpi	r26, 0x62	; 98
  82:	b1 07       	cpc	r27, r17
  84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	a2 e6       	ldi	r26, 0x62	; 98
  8a:	b0 e0       	ldi	r27, 0x00	; 0
  8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
  8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
  90:	a8 36       	cpi	r26, 0x68	; 104
  92:	b2 07       	cpc	r27, r18
  94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
  96:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <main>
  9a:	0c 94 c9 01 	jmp	0x392	; 0x392 <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <gpioPinWrite>:
 * 				- BIT7
 * @param value
 */
void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value){
	
		switch(u8_port){
  a2:	81 30       	cpi	r24, 0x01	; 1
  a4:	89 f0       	breq	.+34     	; 0xc8 <gpioPinWrite+0x26>
  a6:	28 f0       	brcs	.+10     	; 0xb2 <gpioPinWrite+0x10>
  a8:	82 30       	cpi	r24, 0x02	; 2
  aa:	c9 f0       	breq	.+50     	; 0xde <gpioPinWrite+0x3c>
  ac:	83 30       	cpi	r24, 0x03	; 3
  ae:	11 f1       	breq	.+68     	; 0xf4 <gpioPinWrite+0x52>
  b0:	08 95       	ret
			
			case 0:
					PORTA_DATA &= ~(u8_pins);
  b2:	8b b3       	in	r24, 0x1b	; 27
  b4:	96 2f       	mov	r25, r22
  b6:	90 95       	com	r25
  b8:	89 23       	and	r24, r25
  ba:	8b bb       	out	0x1b, r24	; 27
					if (u8_value != LOW)
  bc:	44 23       	and	r20, r20
  be:	21 f1       	breq	.+72     	; 0x108 <gpioPinWrite+0x66>
					{
						PORTA_DATA |= u8_pins;
  c0:	8b b3       	in	r24, 0x1b	; 27
  c2:	68 2b       	or	r22, r24
  c4:	6b bb       	out	0x1b, r22	; 27
  c6:	08 95       	ret
					}
					break;
			case 1:
					PORTB_DATA &= ~(u8_pins);
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	96 2f       	mov	r25, r22
  cc:	90 95       	com	r25
  ce:	89 23       	and	r24, r25
  d0:	88 bb       	out	0x18, r24	; 24
					if (u8_value != LOW)
  d2:	44 23       	and	r20, r20
  d4:	c9 f0       	breq	.+50     	; 0x108 <gpioPinWrite+0x66>
					{
						PORTB_DATA |= u8_pins;
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	68 2b       	or	r22, r24
  da:	68 bb       	out	0x18, r22	; 24
  dc:	08 95       	ret
					}	
					break;
			case 2:
					PORTC_DATA &= ~(u8_pins);
  de:	85 b3       	in	r24, 0x15	; 21
  e0:	96 2f       	mov	r25, r22
  e2:	90 95       	com	r25
  e4:	89 23       	and	r24, r25
  e6:	85 bb       	out	0x15, r24	; 21
					if (u8_value != LOW)
  e8:	44 23       	and	r20, r20
  ea:	71 f0       	breq	.+28     	; 0x108 <gpioPinWrite+0x66>
					{
						PORTC_DATA |= u8_pins;
  ec:	85 b3       	in	r24, 0x15	; 21
  ee:	68 2b       	or	r22, r24
  f0:	65 bb       	out	0x15, r22	; 21
  f2:	08 95       	ret
					}
					break;
			case 3:
					PORTD_DATA &= ~(u8_pins);
  f4:	82 b3       	in	r24, 0x12	; 18
  f6:	96 2f       	mov	r25, r22
  f8:	90 95       	com	r25
  fa:	89 23       	and	r24, r25
  fc:	82 bb       	out	0x12, r24	; 18
					if (u8_value != LOW)
  fe:	44 23       	and	r20, r20
 100:	19 f0       	breq	.+6      	; 0x108 <gpioPinWrite+0x66>
					{
						PORTD_DATA |= u8_pins;
 102:	82 b3       	in	r24, 0x12	; 18
 104:	68 2b       	or	r22, r24
 106:	62 bb       	out	0x12, r22	; 18
 108:	08 95       	ret

0000010a <__vector_10>:
// }

uint8_t cycleCounter = 0;


 ISR( TIMER0_COMP_vect ){
 10a:	1f 92       	push	r1
 10c:	0f 92       	push	r0
 10e:	0f b6       	in	r0, 0x3f	; 63
 110:	0f 92       	push	r0
 112:	11 24       	eor	r1, r1
 114:	2f 93       	push	r18
 116:	3f 93       	push	r19
 118:	4f 93       	push	r20
 11a:	5f 93       	push	r21
 11c:	6f 93       	push	r22
 11e:	7f 93       	push	r23
 120:	8f 93       	push	r24
 122:	9f 93       	push	r25
 124:	af 93       	push	r26
 126:	bf 93       	push	r27
 128:	ef 93       	push	r30
 12a:	ff 93       	push	r31
	
		 gpioPinWrite(GPIOC, BIT0, LOW);
 12c:	40 e0       	ldi	r20, 0x00	; 0
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	0e 94 51 00 	call	0xa2	; 0xa2 <gpioPinWrite>
		 //	 softwareDelayMs(100);

}
 136:	ff 91       	pop	r31
 138:	ef 91       	pop	r30
 13a:	bf 91       	pop	r27
 13c:	af 91       	pop	r26
 13e:	9f 91       	pop	r25
 140:	8f 91       	pop	r24
 142:	7f 91       	pop	r23
 144:	6f 91       	pop	r22
 146:	5f 91       	pop	r21
 148:	4f 91       	pop	r20
 14a:	3f 91       	pop	r19
 14c:	2f 91       	pop	r18
 14e:	0f 90       	pop	r0
 150:	0f be       	out	0x3f, r0	; 63
 152:	0f 90       	pop	r0
 154:	1f 90       	pop	r1
 156:	18 95       	reti

00000158 <__vector_11>:
 ISR( TIMER0_OVF_vect ){
 158:	1f 92       	push	r1
 15a:	0f 92       	push	r0
 15c:	0f b6       	in	r0, 0x3f	; 63
 15e:	0f 92       	push	r0
 160:	11 24       	eor	r1, r1
 162:	2f 93       	push	r18
 164:	3f 93       	push	r19
 166:	4f 93       	push	r20
 168:	5f 93       	push	r21
 16a:	6f 93       	push	r22
 16c:	7f 93       	push	r23
 16e:	8f 93       	push	r24
 170:	9f 93       	push	r25
 172:	af 93       	push	r26
 174:	bf 93       	push	r27
 176:	ef 93       	push	r30
 178:	ff 93       	push	r31
	 
	 gpioPinWrite(GPIOC, BIT0, HIGH);
 17a:	4f ef       	ldi	r20, 0xFF	; 255
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	82 e0       	ldi	r24, 0x02	; 2
 180:	0e 94 51 00 	call	0xa2	; 0xa2 <gpioPinWrite>
	// softwareDelayMs(100);
	// cycleCounter++;
 }
 184:	ff 91       	pop	r31
 186:	ef 91       	pop	r30
 188:	bf 91       	pop	r27
 18a:	af 91       	pop	r26
 18c:	9f 91       	pop	r25
 18e:	8f 91       	pop	r24
 190:	7f 91       	pop	r23
 192:	6f 91       	pop	r22
 194:	5f 91       	pop	r21
 196:	4f 91       	pop	r20
 198:	3f 91       	pop	r19
 19a:	2f 91       	pop	r18
 19c:	0f 90       	pop	r0
 19e:	0f be       	out	0x3f, r0	; 63
 1a0:	0f 90       	pop	r0
 1a2:	1f 90       	pop	r1
 1a4:	18 95       	reti

000001a6 <main>:


int main(void)
{ 
		PORTC_DIR = 0Xff;
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	84 bb       	out	0x14, r24	; 20
		PORTC_DATA = 0;
 1aa:	15 ba       	out	0x15, r1	; 21

			timer0SwPWM( 70, 200);
 1ac:	68 ec       	ldi	r22, 0xC8	; 200
 1ae:	86 e4       	ldi	r24, 0x46	; 70
 1b0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <timer0SwPWM>
		


	//timer1Init(T1_NORMAL_MODE, T1_OC1_DIS, T1_PRESCALER_64, 0,0,0,0 ,T1_POLLING);
     SREG |= (1<<7); 
 1b4:	8f b7       	in	r24, 0x3f	; 63
 1b6:	80 68       	ori	r24, 0x80	; 128
 1b8:	8f bf       	out	0x3f, r24	; 63
	 
	 while(1){
		 			timer0SwPWM( 70, 200);
 1ba:	68 ec       	ldi	r22, 0xC8	; 200
 1bc:	86 e4       	ldi	r24, 0x46	; 70
 1be:	0e 94 58 01 	call	0x2b0	; 0x2b0 <timer0SwPWM>

		 	softwareDelayMs(3000);
 1c2:	68 eb       	ldi	r22, 0xB8	; 184
 1c4:	7b e0       	ldi	r23, 0x0B	; 11
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <softwareDelayMs>
		 	timer0SwPWM( 30, 200);
 1ce:	68 ec       	ldi	r22, 0xC8	; 200
 1d0:	8e e1       	ldi	r24, 0x1E	; 30
 1d2:	0e 94 58 01 	call	0x2b0	; 0x2b0 <timer0SwPWM>
		 	softwareDelayMs(3000);
 1d6:	68 eb       	ldi	r22, 0xB8	; 184
 1d8:	7b e0       	ldi	r23, 0x0B	; 11
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <softwareDelayMs>
 1e2:	eb cf       	rjmp	.-42     	; 0x1ba <main+0x14>

000001e4 <softwareDelayMs>:
/**
 * Description: this delay function operate in a polling manner
 * 				don't use it with RTOSs
 * @param a_delay_in_ms: the milli-seconds
 */
void softwareDelayMs(uint32_t u32_delay_in_ms){
 1e4:	0f 93       	push	r16
 1e6:	1f 93       	push	r17
 1e8:	8b 01       	movw	r16, r22
 1ea:	9c 01       	movw	r18, r24
		
	uint8_t NumOfCounts = u32_delay_in_ms / ( 4 * 1 / 8000000);
			*/
		uint32_t numbersOfmsCounter = 0 ; 
		uint32_t counter1 = 0;
	for (numbersOfmsCounter = 0; numbersOfmsCounter < u32_delay_in_ms ; numbersOfmsCounter++)
 1ec:	67 2b       	or	r22, r23
 1ee:	68 2b       	or	r22, r24
 1f0:	69 2b       	or	r22, r25
 1f2:	89 f4       	brne	.+34     	; 0x216 <softwareDelayMs+0x32>
 1f4:	16 c0       	rjmp	.+44     	; 0x222 <softwareDelayMs+0x3e>
	{
	 for (counter1 = 0 ; counter1 < 1000 ; counter1++)
	  {
		  asm("NOP"); // takes one clock cycle	 
 1f6:	00 00       	nop
 1f8:	01 96       	adiw	r24, 0x01	; 1
			*/
		uint32_t numbersOfmsCounter = 0 ; 
		uint32_t counter1 = 0;
	for (numbersOfmsCounter = 0; numbersOfmsCounter < u32_delay_in_ms ; numbersOfmsCounter++)
	{
	 for (counter1 = 0 ; counter1 < 1000 ; counter1++)
 1fa:	88 3e       	cpi	r24, 0xE8	; 232
 1fc:	e3 e0       	ldi	r30, 0x03	; 3
 1fe:	9e 07       	cpc	r25, r30
 200:	d1 f7       	brne	.-12     	; 0x1f6 <softwareDelayMs+0x12>
		
	uint8_t NumOfCounts = u32_delay_in_ms / ( 4 * 1 / 8000000);
			*/
		uint32_t numbersOfmsCounter = 0 ; 
		uint32_t counter1 = 0;
	for (numbersOfmsCounter = 0; numbersOfmsCounter < u32_delay_in_ms ; numbersOfmsCounter++)
 202:	4f 5f       	subi	r20, 0xFF	; 255
 204:	5f 4f       	sbci	r21, 0xFF	; 255
 206:	6f 4f       	sbci	r22, 0xFF	; 255
 208:	7f 4f       	sbci	r23, 0xFF	; 255
 20a:	04 17       	cp	r16, r20
 20c:	15 07       	cpc	r17, r21
 20e:	26 07       	cpc	r18, r22
 210:	37 07       	cpc	r19, r23
 212:	21 f4       	brne	.+8      	; 0x21c <softwareDelayMs+0x38>
 214:	06 c0       	rjmp	.+12     	; 0x222 <softwareDelayMs+0x3e>
 216:	40 e0       	ldi	r20, 0x00	; 0
 218:	50 e0       	ldi	r21, 0x00	; 0
 21a:	ba 01       	movw	r22, r20
/**
 * Description: this delay function operate in a polling manner
 * 				don't use it with RTOSs
 * @param a_delay_in_ms: the milli-seconds
 */
void softwareDelayMs(uint32_t u32_delay_in_ms){
 21c:	80 e0       	ldi	r24, 0x00	; 0
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	ea cf       	rjmp	.-44     	; 0x1f6 <softwareDelayMs+0x12>
	  {
		  asm("NOP"); // takes one clock cycle	 
	 }
  }
	
 222:	1f 91       	pop	r17
 224:	0f 91       	pop	r16
 226:	08 95       	ret

00000228 <timer0Init>:
			timer0Set(6); // Preload with 256 - 250 counts
			while(!(TIFR & (1 << 0)));
			TIFR |= (1 << 0); // clear with writing one 
		}
		timer0Stop();
}
 228:	ef 92       	push	r14
 22a:	0f 93       	push	r16
 22c:	93 b7       	in	r25, 0x33	; 51
 22e:	69 2b       	or	r22, r25
 230:	86 2b       	or	r24, r22
 232:	83 bf       	out	0x33, r24	; 51
 234:	22 bf       	out	0x32, r18	; 50
 236:	0c bf       	out	0x3c, r16	; 60
 238:	40 93 60 00 	sts	0x0060, r20	; 0x800060 <__data_start>
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	48 30       	cpi	r20, 0x08	; 8
 240:	51 05       	cpc	r21, r1
 242:	50 f5       	brcc	.+84     	; 0x298 <timer0Init+0x70>
 244:	fa 01       	movw	r30, r20
 246:	e6 5d       	subi	r30, 0xD6	; 214
 248:	ff 4f       	sbci	r31, 0xFF	; 255
 24a:	0c 94 b4 01 	jmp	0x368	; 0x368 <__tablejump2__>
 24e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <g_tickTime>
 252:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <g_frequency>
 256:	20 c0       	rjmp	.+64     	; 0x298 <timer0Init+0x70>
 258:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <g_tickTime>
 25c:	80 e8       	ldi	r24, 0x80	; 128
 25e:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <g_frequency>
 262:	1a c0       	rjmp	.+52     	; 0x298 <timer0Init+0x70>
 264:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <g_tickTime>
 268:	80 e2       	ldi	r24, 0x20	; 32
 26a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <g_frequency>
 26e:	14 c0       	rjmp	.+40     	; 0x298 <timer0Init+0x70>
 270:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <g_tickTime>
 274:	80 e9       	ldi	r24, 0x90	; 144
 276:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <g_frequency>
 27a:	0e c0       	rjmp	.+28     	; 0x298 <timer0Init+0x70>
 27c:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <g_tickTime>
 280:	88 e4       	ldi	r24, 0x48	; 72
 282:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <g_frequency>
 286:	08 c0       	rjmp	.+16     	; 0x298 <timer0Init+0x70>
 288:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <g_tickTime>
 28c:	05 c0       	rjmp	.+10     	; 0x298 <timer0Init+0x70>
 28e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <g_tickTime>
 292:	89 e0       	ldi	r24, 0x09	; 9
 294:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <g_frequency>
 298:	89 b7       	in	r24, 0x39	; 57
 29a:	e8 2a       	or	r14, r24
 29c:	e9 be       	out	0x39, r14	; 57
 29e:	0f 91       	pop	r16
 2a0:	ef 90       	pop	r14
 2a2:	08 95       	ret

000002a4 <timer0Start>:
 2a4:	93 b7       	in	r25, 0x33	; 51
 2a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 2aa:	89 2b       	or	r24, r25
 2ac:	83 bf       	out	0x33, r24	; 51
 2ae:	08 95       	ret

000002b0 <timer0SwPWM>:

/**
 * Description:
 * @param dutyCycle
 */
void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency){
 2b0:	ef 92       	push	r14
 2b2:	0f 93       	push	r16
 2b4:	cf 93       	push	r28
 2b6:	c8 2f       	mov	r28, r24
		uint16_t pwmTicks;
		uint8_t onTime ;
		pwmTicks = FCPU / (u8_frequency * 1000 );
		onTime = u8_dutyCycle * pwmTicks / 100;
		
		timer0Init(T0_NORMAL_MODE, T0_OC0_DIS, T0_PRESCALER_8,
 2b8:	88 ee       	ldi	r24, 0xE8	; 232
 2ba:	93 e0       	ldi	r25, 0x03	; 3
 2bc:	68 9f       	mul	r22, r24
 2be:	90 01       	movw	r18, r0
 2c0:	69 9f       	mul	r22, r25
 2c2:	30 0d       	add	r19, r0
 2c4:	11 24       	eor	r1, r1
 2c6:	03 2e       	mov	r0, r19
 2c8:	00 0c       	add	r0, r0
 2ca:	44 0b       	sbc	r20, r20
 2cc:	55 0b       	sbc	r21, r21
 2ce:	60 e0       	ldi	r22, 0x00	; 0
 2d0:	74 e2       	ldi	r23, 0x24	; 36
 2d2:	84 ef       	ldi	r24, 0xF4	; 244
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 92 01 	call	0x324	; 0x324 <__udivmodsi4>
 2da:	8c 2f       	mov	r24, r28
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	82 9f       	mul	r24, r18
 2e0:	b0 01       	movw	r22, r0
 2e2:	83 9f       	mul	r24, r19
 2e4:	70 0d       	add	r23, r0
 2e6:	92 9f       	mul	r25, r18
 2e8:	70 0d       	add	r23, r0
 2ea:	11 24       	eor	r1, r1
 2ec:	9b 01       	movw	r18, r22
 2ee:	36 95       	lsr	r19
 2f0:	27 95       	ror	r18
 2f2:	36 95       	lsr	r19
 2f4:	27 95       	ror	r18
 2f6:	ab e7       	ldi	r26, 0x7B	; 123
 2f8:	b4 e1       	ldi	r27, 0x14	; 20
 2fa:	0e 94 ba 01 	call	0x374	; 0x374 <__umulhisi3>
 2fe:	96 95       	lsr	r25
 300:	87 95       	ror	r24
 302:	0f 2e       	mov	r0, r31
 304:	f3 e0       	ldi	r31, 0x03	; 3
 306:	ef 2e       	mov	r14, r31
 308:	f0 2d       	mov	r31, r0
 30a:	08 2f       	mov	r16, r24
 30c:	20 e0       	ldi	r18, 0x00	; 0
 30e:	42 e0       	ldi	r20, 0x02	; 2
 310:	60 e0       	ldi	r22, 0x00	; 0
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	0e 94 14 01 	call	0x228	; 0x228 <timer0Init>
				0, onTime, T0_INTERRUPT_NORMAL | T0_INTERRUPT_CMP);
		
		//OCR0 = onTime;
		timer0Start();
 318:	0e 94 52 01 	call	0x2a4	; 0x2a4 <timer0Start>
		
		
		/*OCR0*/
		
}
 31c:	cf 91       	pop	r28
 31e:	0f 91       	pop	r16
 320:	ef 90       	pop	r14
 322:	08 95       	ret

00000324 <__udivmodsi4>:
 324:	a1 e2       	ldi	r26, 0x21	; 33
 326:	1a 2e       	mov	r1, r26
 328:	aa 1b       	sub	r26, r26
 32a:	bb 1b       	sub	r27, r27
 32c:	fd 01       	movw	r30, r26
 32e:	0d c0       	rjmp	.+26     	; 0x34a <__udivmodsi4_ep>

00000330 <__udivmodsi4_loop>:
 330:	aa 1f       	adc	r26, r26
 332:	bb 1f       	adc	r27, r27
 334:	ee 1f       	adc	r30, r30
 336:	ff 1f       	adc	r31, r31
 338:	a2 17       	cp	r26, r18
 33a:	b3 07       	cpc	r27, r19
 33c:	e4 07       	cpc	r30, r20
 33e:	f5 07       	cpc	r31, r21
 340:	20 f0       	brcs	.+8      	; 0x34a <__udivmodsi4_ep>
 342:	a2 1b       	sub	r26, r18
 344:	b3 0b       	sbc	r27, r19
 346:	e4 0b       	sbc	r30, r20
 348:	f5 0b       	sbc	r31, r21

0000034a <__udivmodsi4_ep>:
 34a:	66 1f       	adc	r22, r22
 34c:	77 1f       	adc	r23, r23
 34e:	88 1f       	adc	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	1a 94       	dec	r1
 354:	69 f7       	brne	.-38     	; 0x330 <__udivmodsi4_loop>
 356:	60 95       	com	r22
 358:	70 95       	com	r23
 35a:	80 95       	com	r24
 35c:	90 95       	com	r25
 35e:	9b 01       	movw	r18, r22
 360:	ac 01       	movw	r20, r24
 362:	bd 01       	movw	r22, r26
 364:	cf 01       	movw	r24, r30
 366:	08 95       	ret

00000368 <__tablejump2__>:
 368:	ee 0f       	add	r30, r30
 36a:	ff 1f       	adc	r31, r31
 36c:	05 90       	lpm	r0, Z+
 36e:	f4 91       	lpm	r31, Z
 370:	e0 2d       	mov	r30, r0
 372:	09 94       	ijmp

00000374 <__umulhisi3>:
 374:	a2 9f       	mul	r26, r18
 376:	b0 01       	movw	r22, r0
 378:	b3 9f       	mul	r27, r19
 37a:	c0 01       	movw	r24, r0
 37c:	a3 9f       	mul	r26, r19
 37e:	70 0d       	add	r23, r0
 380:	81 1d       	adc	r24, r1
 382:	11 24       	eor	r1, r1
 384:	91 1d       	adc	r25, r1
 386:	b2 9f       	mul	r27, r18
 388:	70 0d       	add	r23, r0
 38a:	81 1d       	adc	r24, r1
 38c:	11 24       	eor	r1, r1
 38e:	91 1d       	adc	r25, r1
 390:	08 95       	ret

00000392 <_exit>:
 392:	f8 94       	cli

00000394 <__stop_program>:
 394:	ff cf       	rjmp	.-2      	; 0x394 <__stop_program>
