
DIO_Challenge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000716  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000716  000007aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800062  00800062  000007ac  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007dc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cf4  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c2d  00000000  00000000  00002714  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c60  00000000  00000000  00003341  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000048c  00000000  00000000  00003fa4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000cf2  00000000  00000000  00004430  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010d8  00000000  00000000  00005122  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  000061fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e1       	ldi	r30, 0x16	; 22
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 01 	call	0x292	; 0x292 <main>
  8a:	0c 94 89 03 	jmp	0x712	; 0x712 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <gpioPinDirection>:
 * 				- 0x00 -> Input
 * 				- 0xff -> Output
 */
void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction){
	
	switch(u8_port){
  92:	81 30       	cpi	r24, 0x01	; 1
  94:	89 f0       	breq	.+34     	; 0xb8 <gpioPinDirection+0x26>
  96:	28 f0       	brcs	.+10     	; 0xa2 <gpioPinDirection+0x10>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	c9 f0       	breq	.+50     	; 0xce <gpioPinDirection+0x3c>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	11 f1       	breq	.+68     	; 0xe4 <gpioPinDirection+0x52>
  a0:	08 95       	ret
		
		case 0: 
				if ( u8_direction == INPUT )
  a2:	41 11       	cpse	r20, r1
  a4:	05 c0       	rjmp	.+10     	; 0xb0 <gpioPinDirection+0x1e>
				{
					PORTA_DIR &= ~(u8_pins); //clear the bits to be inputs
  a6:	8a b3       	in	r24, 0x1a	; 26
  a8:	60 95       	com	r22
  aa:	68 23       	and	r22, r24
  ac:	6a bb       	out	0x1a, r22	; 26
  ae:	08 95       	ret
				}
				else{
					PORTA_DIR |= u8_pins;
  b0:	8a b3       	in	r24, 0x1a	; 26
  b2:	68 2b       	or	r22, r24
  b4:	6a bb       	out	0x1a, r22	; 26
  b6:	08 95       	ret
				}
					break;
		case 1:
				if ( u8_direction == INPUT )
  b8:	41 11       	cpse	r20, r1
  ba:	05 c0       	rjmp	.+10     	; 0xc6 <gpioPinDirection+0x34>
					{
						PORTB_DIR &= ~(u8_pins); //clear the bits to be inputs
  bc:	87 b3       	in	r24, 0x17	; 23
  be:	60 95       	com	r22
  c0:	68 23       	and	r22, r24
  c2:	67 bb       	out	0x17, r22	; 23
  c4:	08 95       	ret
					}
					else{
						PORTB_DIR |= u8_pins;
  c6:	87 b3       	in	r24, 0x17	; 23
  c8:	68 2b       	or	r22, r24
  ca:	67 bb       	out	0x17, r22	; 23
  cc:	08 95       	ret
					}
						break;
		case 2:
				if ( u8_direction == INPUT )
  ce:	41 11       	cpse	r20, r1
  d0:	05 c0       	rjmp	.+10     	; 0xdc <gpioPinDirection+0x4a>
				{
					PORTC_DIR &= ~(u8_pins); //clear the bits to be inputs
  d2:	84 b3       	in	r24, 0x14	; 20
  d4:	60 95       	com	r22
  d6:	68 23       	and	r22, r24
  d8:	64 bb       	out	0x14, r22	; 20
  da:	08 95       	ret
				}
				else{
					PORTC_DIR |= u8_pins;
  dc:	84 b3       	in	r24, 0x14	; 20
  de:	68 2b       	or	r22, r24
  e0:	64 bb       	out	0x14, r22	; 20
  e2:	08 95       	ret
				}
				break;		
		case 3:
				if ( u8_direction == INPUT )
  e4:	41 11       	cpse	r20, r1
  e6:	05 c0       	rjmp	.+10     	; 0xf2 <gpioPinDirection+0x60>
				{
					PORTD_DIR &= ~(u8_pins); //clear the bits to be inputs
  e8:	81 b3       	in	r24, 0x11	; 17
  ea:	60 95       	com	r22
  ec:	68 23       	and	r22, r24
  ee:	61 bb       	out	0x11, r22	; 17
  f0:	08 95       	ret
				}
				else{
					PORTD_DIR |= u8_pins;
  f2:	81 b3       	in	r24, 0x11	; 17
  f4:	68 2b       	or	r22, r24
  f6:	61 bb       	out	0x11, r22	; 17
  f8:	08 95       	ret

000000fa <HwPWMInit>:

#include "HwPWM.h"
#include "timers.h"

	
void HwPWMInit(void){
  fa:	af 92       	push	r10
  fc:	cf 92       	push	r12
  fe:	df 92       	push	r13
 100:	ef 92       	push	r14
 102:	ff 92       	push	r15
 104:	0f 93       	push	r16
 106:	1f 93       	push	r17
	
timer1Init(0x00,
 108:	a1 2c       	mov	r10, r1
 10a:	c1 2c       	mov	r12, r1
 10c:	d1 2c       	mov	r13, r1
 10e:	e1 2c       	mov	r14, r1
 110:	f1 2c       	mov	r15, r1
 112:	00 e0       	ldi	r16, 0x00	; 0
 114:	10 e0       	ldi	r17, 0x00	; 0
 116:	20 e0       	ldi	r18, 0x00	; 0
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	43 e0       	ldi	r20, 0x03	; 3
 11c:	60 e0       	ldi	r22, 0x00	; 0
 11e:	70 ea       	ldi	r23, 0xA0	; 160
 120:	80 e0       	ldi	r24, 0x00	; 0
 122:	0e 94 a2 01 	call	0x344	; 0x344 <timer1Init>
		0,
		0,
		0,
		T1_POLLING);
		
		TCCR1A |= 0x03;
 126:	8f b5       	in	r24, 0x2f	; 47
 128:	83 60       	ori	r24, 0x03	; 3
 12a:	8f bd       	out	0x2f, r24	; 47
		TCCR1B |= 0x10;
 12c:	8e b5       	in	r24, 0x2e	; 46
 12e:	80 61       	ori	r24, 0x10	; 16
 130:	8e bd       	out	0x2e, r24	; 46

gpioPinDirection(GPIOD, BIT4, OUTPUT);
 132:	4f ef       	ldi	r20, 0xFF	; 255
 134:	60 e1       	ldi	r22, 0x10	; 16
 136:	83 e0       	ldi	r24, 0x03	; 3
 138:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
gpioPinDirection(GPIOD, BIT5, OUTPUT);}
 13c:	4f ef       	ldi	r20, 0xFF	; 255
 13e:	60 e2       	ldi	r22, 0x20	; 32
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	0e 94 49 00 	call	0x92	; 0x92 <gpioPinDirection>
 146:	1f 91       	pop	r17
 148:	0f 91       	pop	r16
 14a:	ff 90       	pop	r15
 14c:	ef 90       	pop	r14
 14e:	df 90       	pop	r13
 150:	cf 90       	pop	r12
 152:	af 90       	pop	r10
 154:	08 95       	ret

00000156 <HwPWMSetDuty>:

void HwPWMSetDuty(uint8_t a_u8_duty, uint32_t a_u32_frequency){
 156:	8f 92       	push	r8
 158:	9f 92       	push	r9
 15a:	af 92       	push	r10
 15c:	bf 92       	push	r11
 15e:	cf 92       	push	r12
 160:	df 92       	push	r13
 162:	ef 92       	push	r14
 164:	ff 92       	push	r15
 166:	cf 93       	push	r28
 168:	c8 2f       	mov	r28, r24
 16a:	9a 01       	movw	r18, r20
 16c:	ab 01       	movw	r20, r22
	
	//timer1Stop();
	uint32_t Period = 16000000/a_u32_frequency;
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	74 e2       	ldi	r23, 0x24	; 36
 172:	84 ef       	ldi	r24, 0xF4	; 244
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 67 03 	call	0x6ce	; 0x6ce <__udivmodsi4>
 17a:	69 01       	movw	r12, r18
 17c:	7a 01       	movw	r14, r20
	uint32_t Ton = Period * (a_u8_duty/100.00);
	TCNT1 = 65536 - Period;
 17e:	88 27       	eor	r24, r24
 180:	99 27       	eor	r25, r25
 182:	82 1b       	sub	r24, r18
 184:	93 0b       	sbc	r25, r19
 186:	9d bd       	out	0x2d, r25	; 45
 188:	8c bd       	out	0x2c, r24	; 44
	OCR1A = 65536 - Period +Ton;
 18a:	6c 2f       	mov	r22, r28
 18c:	70 e0       	ldi	r23, 0x00	; 0
 18e:	80 e0       	ldi	r24, 0x00	; 0
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__floatsisf>
 196:	20 e0       	ldi	r18, 0x00	; 0
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	48 ec       	ldi	r20, 0xC8	; 200
 19c:	52 e4       	ldi	r21, 0x42	; 66
 19e:	0e 94 cb 01 	call	0x396	; 0x396 <__divsf3>
 1a2:	4b 01       	movw	r8, r22
 1a4:	5c 01       	movw	r10, r24
 1a6:	c7 01       	movw	r24, r14
 1a8:	b6 01       	movw	r22, r12
 1aa:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <__floatunsisf>
 1ae:	9b 01       	movw	r18, r22
 1b0:	ac 01       	movw	r20, r24
 1b2:	c5 01       	movw	r24, r10
 1b4:	b4 01       	movw	r22, r8
 1b6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <__mulsf3>
 1ba:	0e 94 3d 02 	call	0x47a	; 0x47a <__fixunssfsi>
 1be:	6c 19       	sub	r22, r12
 1c0:	7d 09       	sbc	r23, r13
 1c2:	7b bd       	out	0x2b, r23	; 43
 1c4:	6a bd       	out	0x2a, r22	; 42
	OCR1B = 65536 - Period +Ton;
 1c6:	79 bd       	out	0x29, r23	; 41
 1c8:	68 bd       	out	0x28, r22	; 40
	timer1Start();
 1ca:	0e 94 c5 01 	call	0x38a	; 0x38a <timer1Start>
	 	
}
 1ce:	cf 91       	pop	r28
 1d0:	ff 90       	pop	r15
 1d2:	ef 90       	pop	r14
 1d4:	df 90       	pop	r13
 1d6:	cf 90       	pop	r12
 1d8:	bf 90       	pop	r11
 1da:	af 90       	pop	r10
 1dc:	9f 90       	pop	r9
 1de:	8f 90       	pop	r8
 1e0:	08 95       	ret

000001e2 <__vector_3>:
void Stop_State(void);


/* SW ICU application */

ISR( INT2_vect) {
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	2f 93       	push	r18
 1ee:	3f 93       	push	r19
 1f0:	4f 93       	push	r20
 1f2:	5f 93       	push	r21
 1f4:	6f 93       	push	r22
 1f6:	7f 93       	push	r23
 1f8:	8f 93       	push	r24
 1fa:	9f 93       	push	r25
 1fc:	af 93       	push	r26
 1fe:	bf 93       	push	r27
 200:	ef 93       	push	r30
 202:	ff 93       	push	r31
	
		static uint8_t edgeDetect = SwICU_EdgeRisiging ;
		if (edgeDetect == SwICU_EdgeRisiging  )
 204:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	71 f4       	brne	.+28     	; 0x228 <__vector_3+0x46>
		{

			SwICU_Start();
 20c:	0e 94 95 01 	call	0x32a	; 0x32a <SwICU_Start>
			GICR &= ~(1<<5);
 210:	8b b7       	in	r24, 0x3b	; 59
 212:	8f 7d       	andi	r24, 0xDF	; 223
 214:	8b bf       	out	0x3b, r24	; 59
			SwICU_SetCfgEdge(SwICU_EdgeFalling);
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	0e 94 88 01 	call	0x310	; 0x310 <SwICU_SetCfgEdge>
			GICR |= (1<<5);
 21c:	8b b7       	in	r24, 0x3b	; 59
 21e:	80 62       	ori	r24, 0x20	; 32
 220:	8b bf       	out	0x3b, r24	; 59
			edgeDetect = SwICU_EdgeFalling;
 222:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
 226:	13 c0       	rjmp	.+38     	; 0x24e <__vector_3+0x6c>
			
		}
		else if (edgeDetect == SwICU_EdgeFalling )
 228:	81 11       	cpse	r24, r1
 22a:	11 c0       	rjmp	.+34     	; 0x24e <__vector_3+0x6c>
		{

			SwICU_Stop();
 22c:	0e 94 92 01 	call	0x324	; 0x324 <SwICU_Stop>
			SwICU_Reading = TCNT0;
 230:	82 b7       	in	r24, 0x32	; 50
 232:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <SwICU_Reading>
		//	TCNT0 = 0;
 			GICR &= ~(1<<5);
 236:	8b b7       	in	r24, 0x3b	; 59
 238:	8f 7d       	andi	r24, 0xDF	; 223
 23a:	8b bf       	out	0x3b, r24	; 59
 			SwICU_SetCfgEdge(SwICU_EdgeRisiging);
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	0e 94 88 01 	call	0x310	; 0x310 <SwICU_SetCfgEdge>
 			GICR |= (1<<5);
 242:	8b b7       	in	r24, 0x3b	; 59
 244:	80 62       	ori	r24, 0x20	; 32
 246:	8b bf       	out	0x3b, r24	; 59
 			edgeDetect = SwICU_EdgeRisiging;
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 			
		}
	}
 24e:	ff 91       	pop	r31
 250:	ef 91       	pop	r30
 252:	bf 91       	pop	r27
 254:	af 91       	pop	r26
 256:	9f 91       	pop	r25
 258:	8f 91       	pop	r24
 25a:	7f 91       	pop	r23
 25c:	6f 91       	pop	r22
 25e:	5f 91       	pop	r21
 260:	4f 91       	pop	r20
 262:	3f 91       	pop	r19
 264:	2f 91       	pop	r18
 266:	0f 90       	pop	r0
 268:	0f be       	out	0x3f, r0	; 63
 26a:	0f 90       	pop	r0
 26c:	1f 90       	pop	r1
 26e:	18 95       	reti

00000270 <__vector_11>:
	
	ISR(TIMER0_OVF_vect){
 270:	1f 92       	push	r1
 272:	0f 92       	push	r0
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	0f 92       	push	r0
 278:	11 24       	eor	r1, r1
 27a:	8f 93       	push	r24
		
		SwICU_overflowCounter++;
 27c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 280:	8f 5f       	subi	r24, 0xFF	; 255
 282:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
	}
 286:	8f 91       	pop	r24
 288:	0f 90       	pop	r0
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	0f 90       	pop	r0
 28e:	1f 90       	pop	r1
 290:	18 95       	reti

00000292 <main>:
  }
  */

int main(void)
{		
		HwPWMInit();
 292:	0e 94 7d 00 	call	0xfa	; 0xfa <HwPWMInit>
		//HwPWMSetDuty(30 , 200);
		
		while(1){
			
			HwPWMSetDuty(70,200);
 296:	48 ec       	ldi	r20, 0xC8	; 200
 298:	50 e0       	ldi	r21, 0x00	; 0
 29a:	60 e0       	ldi	r22, 0x00	; 0
 29c:	70 e0       	ldi	r23, 0x00	; 0
 29e:	86 e4       	ldi	r24, 0x46	; 70
 2a0:	0e 94 ab 00 	call	0x156	; 0x156 <HwPWMSetDuty>
			softwareDelayMs(1000);
 2a4:	68 ee       	ldi	r22, 0xE8	; 232
 2a6:	73 e0       	ldi	r23, 0x03	; 3
 2a8:	80 e0       	ldi	r24, 0x00	; 0
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 66 01 	call	0x2cc	; 0x2cc <softwareDelayMs>
				HwPWMSetDuty(30 , 100);
 2b0:	44 e6       	ldi	r20, 0x64	; 100
 2b2:	50 e0       	ldi	r21, 0x00	; 0
 2b4:	60 e0       	ldi	r22, 0x00	; 0
 2b6:	70 e0       	ldi	r23, 0x00	; 0
 2b8:	8e e1       	ldi	r24, 0x1E	; 30
 2ba:	0e 94 ab 00 	call	0x156	; 0x156 <HwPWMSetDuty>
							softwareDelayMs(1000);
 2be:	68 ee       	ldi	r22, 0xE8	; 232
 2c0:	73 e0       	ldi	r23, 0x03	; 3
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 66 01 	call	0x2cc	; 0x2cc <softwareDelayMs>
 2ca:	e5 cf       	rjmp	.-54     	; 0x296 <main+0x4>

000002cc <softwareDelayMs>:
/**
 * Description: this delay function operate in a polling manner
 * 				don't use it with RTOSs
 * @param a_delay_in_ms: the milli-seconds
 */
void softwareDelayMs(uint32_t u32_delay_in_ms){
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
 2d0:	8b 01       	movw	r16, r22
 2d2:	9c 01       	movw	r18, r24
		
	uint8_t NumOfCounts = u32_delay_in_ms / ( 4 * 1 / 8000000);
			*/
		uint32_t numbersOfmsCounter = 0 ; 
		uint32_t counter1 = 0;
	for (numbersOfmsCounter = 0; numbersOfmsCounter < u32_delay_in_ms ; numbersOfmsCounter++)
 2d4:	67 2b       	or	r22, r23
 2d6:	68 2b       	or	r22, r24
 2d8:	69 2b       	or	r22, r25
 2da:	89 f4       	brne	.+34     	; 0x2fe <softwareDelayMs+0x32>
 2dc:	16 c0       	rjmp	.+44     	; 0x30a <softwareDelayMs+0x3e>
	{
	 for (counter1 = 0 ; counter1 < 1000 ; counter1++)
	  {
		  asm("NOP"); // takes one clock cycle	 
 2de:	00 00       	nop
 2e0:	01 96       	adiw	r24, 0x01	; 1
			*/
		uint32_t numbersOfmsCounter = 0 ; 
		uint32_t counter1 = 0;
	for (numbersOfmsCounter = 0; numbersOfmsCounter < u32_delay_in_ms ; numbersOfmsCounter++)
	{
	 for (counter1 = 0 ; counter1 < 1000 ; counter1++)
 2e2:	88 3e       	cpi	r24, 0xE8	; 232
 2e4:	e3 e0       	ldi	r30, 0x03	; 3
 2e6:	9e 07       	cpc	r25, r30
 2e8:	d1 f7       	brne	.-12     	; 0x2de <softwareDelayMs+0x12>
		
	uint8_t NumOfCounts = u32_delay_in_ms / ( 4 * 1 / 8000000);
			*/
		uint32_t numbersOfmsCounter = 0 ; 
		uint32_t counter1 = 0;
	for (numbersOfmsCounter = 0; numbersOfmsCounter < u32_delay_in_ms ; numbersOfmsCounter++)
 2ea:	4f 5f       	subi	r20, 0xFF	; 255
 2ec:	5f 4f       	sbci	r21, 0xFF	; 255
 2ee:	6f 4f       	sbci	r22, 0xFF	; 255
 2f0:	7f 4f       	sbci	r23, 0xFF	; 255
 2f2:	04 17       	cp	r16, r20
 2f4:	15 07       	cpc	r17, r21
 2f6:	26 07       	cpc	r18, r22
 2f8:	37 07       	cpc	r19, r23
 2fa:	21 f4       	brne	.+8      	; 0x304 <softwareDelayMs+0x38>
 2fc:	06 c0       	rjmp	.+12     	; 0x30a <softwareDelayMs+0x3e>
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	ba 01       	movw	r22, r20
/**
 * Description: this delay function operate in a polling manner
 * 				don't use it with RTOSs
 * @param a_delay_in_ms: the milli-seconds
 */
void softwareDelayMs(uint32_t u32_delay_in_ms){
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	ea cf       	rjmp	.-44     	; 0x2de <softwareDelayMs+0x12>
	  {
		  asm("NOP"); // takes one clock cycle	 
	 }
  }
	
 30a:	1f 91       	pop	r17
 30c:	0f 91       	pop	r16
 30e:	08 95       	ret

00000310 <SwICU_SetCfgEdge>:
	}
}

void SwICU_Read(volatile uint8_t * a_pu8_capt){
	
	a_pu8_capt = timer0Read();
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	21 f4       	brne	.+8      	; 0x31c <SwICU_SetCfgEdge+0xc>
 314:	84 b7       	in	r24, 0x34	; 52
 316:	80 64       	ori	r24, 0x40	; 64
 318:	84 bf       	out	0x34, r24	; 52
 31a:	08 95       	ret
 31c:	84 b7       	in	r24, 0x34	; 52
 31e:	8f 7b       	andi	r24, 0xBF	; 191
 320:	84 bf       	out	0x34, r24	; 52
 322:	08 95       	ret

00000324 <SwICU_Stop>:
	
}

void SwICU_Stop(void){
	
	timer0Stop();
 324:	0e 94 9e 01 	call	0x33c	; 0x33c <timer0Stop>
 328:	08 95       	ret

0000032a <SwICU_Start>:
}

void SwICU_Start(void){
	
	timer0Start();
 32a:	0e 94 98 01 	call	0x330	; 0x330 <timer0Start>
 32e:	08 95       	ret

00000330 <timer0Start>:
 * Description:
 * @return
 */
uint16_t timer1Read(void){
	return TCNT1;
}
 330:	93 b7       	in	r25, 0x33	; 51
 332:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <prescaler>
 336:	89 2b       	or	r24, r25
 338:	83 bf       	out	0x33, r24	; 51
 33a:	08 95       	ret

0000033c <timer0Stop>:
 33c:	83 b7       	in	r24, 0x33	; 51
 33e:	88 7f       	andi	r24, 0xF8	; 248
 340:	83 bf       	out	0x33, r24	; 51
 342:	08 95       	ret

00000344 <timer1Init>:
 344:	af 92       	push	r10
 346:	cf 92       	push	r12
 348:	df 92       	push	r13
 34a:	ef 92       	push	r14
 34c:	ff 92       	push	r15
 34e:	0f 93       	push	r16
 350:	1f 93       	push	r17
 352:	ee b5       	in	r30, 0x2e	; 46
 354:	ff b5       	in	r31, 0x2f	; 47
 356:	6e 2b       	or	r22, r30
 358:	7f 2b       	or	r23, r31
 35a:	68 2b       	or	r22, r24
 35c:	7f bd       	out	0x2f, r23	; 47
 35e:	6e bd       	out	0x2e, r22	; 46
 360:	3d bd       	out	0x2d, r19	; 45
 362:	2c bd       	out	0x2c, r18	; 44
 364:	40 93 66 00 	sts	0x0066, r20	; 0x800066 <T1_prescaler>
 368:	1b bd       	out	0x2b, r17	; 43
 36a:	0a bd       	out	0x2a, r16	; 42
 36c:	f9 bc       	out	0x29, r15	; 41
 36e:	e8 bc       	out	0x28, r14	; 40
 370:	d7 bc       	out	0x27, r13	; 39
 372:	c6 bc       	out	0x26, r12	; 38
 374:	89 b7       	in	r24, 0x39	; 57
 376:	a8 2a       	or	r10, r24
 378:	a9 be       	out	0x39, r10	; 57
 37a:	1f 91       	pop	r17
 37c:	0f 91       	pop	r16
 37e:	ff 90       	pop	r15
 380:	ef 90       	pop	r14
 382:	df 90       	pop	r13
 384:	cf 90       	pop	r12
 386:	af 90       	pop	r10
 388:	08 95       	ret

0000038a <timer1Start>:

/**
 * Description:
 */
void timer1Start(void){
	TCCR1B |= T1_prescaler;
 38a:	9e b5       	in	r25, 0x2e	; 46
 38c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <T1_prescaler>
 390:	89 2b       	or	r24, r25
 392:	8e bd       	out	0x2e, r24	; 46
 394:	08 95       	ret

00000396 <__divsf3>:
 396:	0e 94 df 01 	call	0x3be	; 0x3be <__divsf3x>
 39a:	0c 94 c0 02 	jmp	0x580	; 0x580 <__fp_round>
 39e:	0e 94 b9 02 	call	0x572	; 0x572 <__fp_pscB>
 3a2:	58 f0       	brcs	.+22     	; 0x3ba <__divsf3+0x24>
 3a4:	0e 94 b2 02 	call	0x564	; 0x564 <__fp_pscA>
 3a8:	40 f0       	brcs	.+16     	; 0x3ba <__divsf3+0x24>
 3aa:	29 f4       	brne	.+10     	; 0x3b6 <__divsf3+0x20>
 3ac:	5f 3f       	cpi	r21, 0xFF	; 255
 3ae:	29 f0       	breq	.+10     	; 0x3ba <__divsf3+0x24>
 3b0:	0c 94 a9 02 	jmp	0x552	; 0x552 <__fp_inf>
 3b4:	51 11       	cpse	r21, r1
 3b6:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__fp_szero>
 3ba:	0c 94 af 02 	jmp	0x55e	; 0x55e <__fp_nan>

000003be <__divsf3x>:
 3be:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__fp_split3>
 3c2:	68 f3       	brcs	.-38     	; 0x39e <__divsf3+0x8>

000003c4 <__divsf3_pse>:
 3c4:	99 23       	and	r25, r25
 3c6:	b1 f3       	breq	.-20     	; 0x3b4 <__divsf3+0x1e>
 3c8:	55 23       	and	r21, r21
 3ca:	91 f3       	breq	.-28     	; 0x3b0 <__divsf3+0x1a>
 3cc:	95 1b       	sub	r25, r21
 3ce:	55 0b       	sbc	r21, r21
 3d0:	bb 27       	eor	r27, r27
 3d2:	aa 27       	eor	r26, r26
 3d4:	62 17       	cp	r22, r18
 3d6:	73 07       	cpc	r23, r19
 3d8:	84 07       	cpc	r24, r20
 3da:	38 f0       	brcs	.+14     	; 0x3ea <__divsf3_pse+0x26>
 3dc:	9f 5f       	subi	r25, 0xFF	; 255
 3de:	5f 4f       	sbci	r21, 0xFF	; 255
 3e0:	22 0f       	add	r18, r18
 3e2:	33 1f       	adc	r19, r19
 3e4:	44 1f       	adc	r20, r20
 3e6:	aa 1f       	adc	r26, r26
 3e8:	a9 f3       	breq	.-22     	; 0x3d4 <__divsf3_pse+0x10>
 3ea:	35 d0       	rcall	.+106    	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 3ec:	0e 2e       	mov	r0, r30
 3ee:	3a f0       	brmi	.+14     	; 0x3fe <__divsf3_pse+0x3a>
 3f0:	e0 e8       	ldi	r30, 0x80	; 128
 3f2:	32 d0       	rcall	.+100    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 3f4:	91 50       	subi	r25, 0x01	; 1
 3f6:	50 40       	sbci	r21, 0x00	; 0
 3f8:	e6 95       	lsr	r30
 3fa:	00 1c       	adc	r0, r0
 3fc:	ca f7       	brpl	.-14     	; 0x3f0 <__divsf3_pse+0x2c>
 3fe:	2b d0       	rcall	.+86     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 400:	fe 2f       	mov	r31, r30
 402:	29 d0       	rcall	.+82     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 404:	66 0f       	add	r22, r22
 406:	77 1f       	adc	r23, r23
 408:	88 1f       	adc	r24, r24
 40a:	bb 1f       	adc	r27, r27
 40c:	26 17       	cp	r18, r22
 40e:	37 07       	cpc	r19, r23
 410:	48 07       	cpc	r20, r24
 412:	ab 07       	cpc	r26, r27
 414:	b0 e8       	ldi	r27, 0x80	; 128
 416:	09 f0       	breq	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 418:	bb 0b       	sbc	r27, r27
 41a:	80 2d       	mov	r24, r0
 41c:	bf 01       	movw	r22, r30
 41e:	ff 27       	eor	r31, r31
 420:	93 58       	subi	r25, 0x83	; 131
 422:	5f 4f       	sbci	r21, 0xFF	; 255
 424:	3a f0       	brmi	.+14     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 426:	9e 3f       	cpi	r25, 0xFE	; 254
 428:	51 05       	cpc	r21, r1
 42a:	78 f0       	brcs	.+30     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 42c:	0c 94 a9 02 	jmp	0x552	; 0x552 <__fp_inf>
 430:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__fp_szero>
 434:	5f 3f       	cpi	r21, 0xFF	; 255
 436:	e4 f3       	brlt	.-8      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 438:	98 3e       	cpi	r25, 0xE8	; 232
 43a:	d4 f3       	brlt	.-12     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 43c:	86 95       	lsr	r24
 43e:	77 95       	ror	r23
 440:	67 95       	ror	r22
 442:	b7 95       	ror	r27
 444:	f7 95       	ror	r31
 446:	9f 5f       	subi	r25, 0xFF	; 255
 448:	c9 f7       	brne	.-14     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 44a:	88 0f       	add	r24, r24
 44c:	91 1d       	adc	r25, r1
 44e:	96 95       	lsr	r25
 450:	87 95       	ror	r24
 452:	97 f9       	bld	r25, 7
 454:	08 95       	ret
 456:	e1 e0       	ldi	r30, 0x01	; 1
 458:	66 0f       	add	r22, r22
 45a:	77 1f       	adc	r23, r23
 45c:	88 1f       	adc	r24, r24
 45e:	bb 1f       	adc	r27, r27
 460:	62 17       	cp	r22, r18
 462:	73 07       	cpc	r23, r19
 464:	84 07       	cpc	r24, r20
 466:	ba 07       	cpc	r27, r26
 468:	20 f0       	brcs	.+8      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 46a:	62 1b       	sub	r22, r18
 46c:	73 0b       	sbc	r23, r19
 46e:	84 0b       	sbc	r24, r20
 470:	ba 0b       	sbc	r27, r26
 472:	ee 1f       	adc	r30, r30
 474:	88 f7       	brcc	.-30     	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 476:	e0 95       	com	r30
 478:	08 95       	ret

0000047a <__fixunssfsi>:
 47a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__fp_splitA>
 47e:	88 f0       	brcs	.+34     	; 0x4a2 <__fixunssfsi+0x28>
 480:	9f 57       	subi	r25, 0x7F	; 127
 482:	98 f0       	brcs	.+38     	; 0x4aa <__fixunssfsi+0x30>
 484:	b9 2f       	mov	r27, r25
 486:	99 27       	eor	r25, r25
 488:	b7 51       	subi	r27, 0x17	; 23
 48a:	b0 f0       	brcs	.+44     	; 0x4b8 <__fixunssfsi+0x3e>
 48c:	e1 f0       	breq	.+56     	; 0x4c6 <__fixunssfsi+0x4c>
 48e:	66 0f       	add	r22, r22
 490:	77 1f       	adc	r23, r23
 492:	88 1f       	adc	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	1a f0       	brmi	.+6      	; 0x49e <__fixunssfsi+0x24>
 498:	ba 95       	dec	r27
 49a:	c9 f7       	brne	.-14     	; 0x48e <__fixunssfsi+0x14>
 49c:	14 c0       	rjmp	.+40     	; 0x4c6 <__fixunssfsi+0x4c>
 49e:	b1 30       	cpi	r27, 0x01	; 1
 4a0:	91 f0       	breq	.+36     	; 0x4c6 <__fixunssfsi+0x4c>
 4a2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__fp_zero>
 4a6:	b1 e0       	ldi	r27, 0x01	; 1
 4a8:	08 95       	ret
 4aa:	0c 94 f3 02 	jmp	0x5e6	; 0x5e6 <__fp_zero>
 4ae:	67 2f       	mov	r22, r23
 4b0:	78 2f       	mov	r23, r24
 4b2:	88 27       	eor	r24, r24
 4b4:	b8 5f       	subi	r27, 0xF8	; 248
 4b6:	39 f0       	breq	.+14     	; 0x4c6 <__fixunssfsi+0x4c>
 4b8:	b9 3f       	cpi	r27, 0xF9	; 249
 4ba:	cc f3       	brlt	.-14     	; 0x4ae <__fixunssfsi+0x34>
 4bc:	86 95       	lsr	r24
 4be:	77 95       	ror	r23
 4c0:	67 95       	ror	r22
 4c2:	b3 95       	inc	r27
 4c4:	d9 f7       	brne	.-10     	; 0x4bc <__fixunssfsi+0x42>
 4c6:	3e f4       	brtc	.+14     	; 0x4d6 <__fixunssfsi+0x5c>
 4c8:	90 95       	com	r25
 4ca:	80 95       	com	r24
 4cc:	70 95       	com	r23
 4ce:	61 95       	neg	r22
 4d0:	7f 4f       	sbci	r23, 0xFF	; 255
 4d2:	8f 4f       	sbci	r24, 0xFF	; 255
 4d4:	9f 4f       	sbci	r25, 0xFF	; 255
 4d6:	08 95       	ret

000004d8 <__floatunsisf>:
 4d8:	e8 94       	clt
 4da:	09 c0       	rjmp	.+18     	; 0x4ee <__floatsisf+0x12>

000004dc <__floatsisf>:
 4dc:	97 fb       	bst	r25, 7
 4de:	3e f4       	brtc	.+14     	; 0x4ee <__floatsisf+0x12>
 4e0:	90 95       	com	r25
 4e2:	80 95       	com	r24
 4e4:	70 95       	com	r23
 4e6:	61 95       	neg	r22
 4e8:	7f 4f       	sbci	r23, 0xFF	; 255
 4ea:	8f 4f       	sbci	r24, 0xFF	; 255
 4ec:	9f 4f       	sbci	r25, 0xFF	; 255
 4ee:	99 23       	and	r25, r25
 4f0:	a9 f0       	breq	.+42     	; 0x51c <__floatsisf+0x40>
 4f2:	f9 2f       	mov	r31, r25
 4f4:	96 e9       	ldi	r25, 0x96	; 150
 4f6:	bb 27       	eor	r27, r27
 4f8:	93 95       	inc	r25
 4fa:	f6 95       	lsr	r31
 4fc:	87 95       	ror	r24
 4fe:	77 95       	ror	r23
 500:	67 95       	ror	r22
 502:	b7 95       	ror	r27
 504:	f1 11       	cpse	r31, r1
 506:	f8 cf       	rjmp	.-16     	; 0x4f8 <__floatsisf+0x1c>
 508:	fa f4       	brpl	.+62     	; 0x548 <__floatsisf+0x6c>
 50a:	bb 0f       	add	r27, r27
 50c:	11 f4       	brne	.+4      	; 0x512 <__floatsisf+0x36>
 50e:	60 ff       	sbrs	r22, 0
 510:	1b c0       	rjmp	.+54     	; 0x548 <__floatsisf+0x6c>
 512:	6f 5f       	subi	r22, 0xFF	; 255
 514:	7f 4f       	sbci	r23, 0xFF	; 255
 516:	8f 4f       	sbci	r24, 0xFF	; 255
 518:	9f 4f       	sbci	r25, 0xFF	; 255
 51a:	16 c0       	rjmp	.+44     	; 0x548 <__floatsisf+0x6c>
 51c:	88 23       	and	r24, r24
 51e:	11 f0       	breq	.+4      	; 0x524 <__floatsisf+0x48>
 520:	96 e9       	ldi	r25, 0x96	; 150
 522:	11 c0       	rjmp	.+34     	; 0x546 <__floatsisf+0x6a>
 524:	77 23       	and	r23, r23
 526:	21 f0       	breq	.+8      	; 0x530 <__floatsisf+0x54>
 528:	9e e8       	ldi	r25, 0x8E	; 142
 52a:	87 2f       	mov	r24, r23
 52c:	76 2f       	mov	r23, r22
 52e:	05 c0       	rjmp	.+10     	; 0x53a <__floatsisf+0x5e>
 530:	66 23       	and	r22, r22
 532:	71 f0       	breq	.+28     	; 0x550 <__floatsisf+0x74>
 534:	96 e8       	ldi	r25, 0x86	; 134
 536:	86 2f       	mov	r24, r22
 538:	70 e0       	ldi	r23, 0x00	; 0
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	2a f0       	brmi	.+10     	; 0x548 <__floatsisf+0x6c>
 53e:	9a 95       	dec	r25
 540:	66 0f       	add	r22, r22
 542:	77 1f       	adc	r23, r23
 544:	88 1f       	adc	r24, r24
 546:	da f7       	brpl	.-10     	; 0x53e <__floatsisf+0x62>
 548:	88 0f       	add	r24, r24
 54a:	96 95       	lsr	r25
 54c:	87 95       	ror	r24
 54e:	97 f9       	bld	r25, 7
 550:	08 95       	ret

00000552 <__fp_inf>:
 552:	97 f9       	bld	r25, 7
 554:	9f 67       	ori	r25, 0x7F	; 127
 556:	80 e8       	ldi	r24, 0x80	; 128
 558:	70 e0       	ldi	r23, 0x00	; 0
 55a:	60 e0       	ldi	r22, 0x00	; 0
 55c:	08 95       	ret

0000055e <__fp_nan>:
 55e:	9f ef       	ldi	r25, 0xFF	; 255
 560:	80 ec       	ldi	r24, 0xC0	; 192
 562:	08 95       	ret

00000564 <__fp_pscA>:
 564:	00 24       	eor	r0, r0
 566:	0a 94       	dec	r0
 568:	16 16       	cp	r1, r22
 56a:	17 06       	cpc	r1, r23
 56c:	18 06       	cpc	r1, r24
 56e:	09 06       	cpc	r0, r25
 570:	08 95       	ret

00000572 <__fp_pscB>:
 572:	00 24       	eor	r0, r0
 574:	0a 94       	dec	r0
 576:	12 16       	cp	r1, r18
 578:	13 06       	cpc	r1, r19
 57a:	14 06       	cpc	r1, r20
 57c:	05 06       	cpc	r0, r21
 57e:	08 95       	ret

00000580 <__fp_round>:
 580:	09 2e       	mov	r0, r25
 582:	03 94       	inc	r0
 584:	00 0c       	add	r0, r0
 586:	11 f4       	brne	.+4      	; 0x58c <__fp_round+0xc>
 588:	88 23       	and	r24, r24
 58a:	52 f0       	brmi	.+20     	; 0x5a0 <__fp_round+0x20>
 58c:	bb 0f       	add	r27, r27
 58e:	40 f4       	brcc	.+16     	; 0x5a0 <__fp_round+0x20>
 590:	bf 2b       	or	r27, r31
 592:	11 f4       	brne	.+4      	; 0x598 <__fp_round+0x18>
 594:	60 ff       	sbrs	r22, 0
 596:	04 c0       	rjmp	.+8      	; 0x5a0 <__fp_round+0x20>
 598:	6f 5f       	subi	r22, 0xFF	; 255
 59a:	7f 4f       	sbci	r23, 0xFF	; 255
 59c:	8f 4f       	sbci	r24, 0xFF	; 255
 59e:	9f 4f       	sbci	r25, 0xFF	; 255
 5a0:	08 95       	ret

000005a2 <__fp_split3>:
 5a2:	57 fd       	sbrc	r21, 7
 5a4:	90 58       	subi	r25, 0x80	; 128
 5a6:	44 0f       	add	r20, r20
 5a8:	55 1f       	adc	r21, r21
 5aa:	59 f0       	breq	.+22     	; 0x5c2 <__fp_splitA+0x10>
 5ac:	5f 3f       	cpi	r21, 0xFF	; 255
 5ae:	71 f0       	breq	.+28     	; 0x5cc <__fp_splitA+0x1a>
 5b0:	47 95       	ror	r20

000005b2 <__fp_splitA>:
 5b2:	88 0f       	add	r24, r24
 5b4:	97 fb       	bst	r25, 7
 5b6:	99 1f       	adc	r25, r25
 5b8:	61 f0       	breq	.+24     	; 0x5d2 <__fp_splitA+0x20>
 5ba:	9f 3f       	cpi	r25, 0xFF	; 255
 5bc:	79 f0       	breq	.+30     	; 0x5dc <__fp_splitA+0x2a>
 5be:	87 95       	ror	r24
 5c0:	08 95       	ret
 5c2:	12 16       	cp	r1, r18
 5c4:	13 06       	cpc	r1, r19
 5c6:	14 06       	cpc	r1, r20
 5c8:	55 1f       	adc	r21, r21
 5ca:	f2 cf       	rjmp	.-28     	; 0x5b0 <__fp_split3+0xe>
 5cc:	46 95       	lsr	r20
 5ce:	f1 df       	rcall	.-30     	; 0x5b2 <__fp_splitA>
 5d0:	08 c0       	rjmp	.+16     	; 0x5e2 <__fp_splitA+0x30>
 5d2:	16 16       	cp	r1, r22
 5d4:	17 06       	cpc	r1, r23
 5d6:	18 06       	cpc	r1, r24
 5d8:	99 1f       	adc	r25, r25
 5da:	f1 cf       	rjmp	.-30     	; 0x5be <__fp_splitA+0xc>
 5dc:	86 95       	lsr	r24
 5de:	71 05       	cpc	r23, r1
 5e0:	61 05       	cpc	r22, r1
 5e2:	08 94       	sec
 5e4:	08 95       	ret

000005e6 <__fp_zero>:
 5e6:	e8 94       	clt

000005e8 <__fp_szero>:
 5e8:	bb 27       	eor	r27, r27
 5ea:	66 27       	eor	r22, r22
 5ec:	77 27       	eor	r23, r23
 5ee:	cb 01       	movw	r24, r22
 5f0:	97 f9       	bld	r25, 7
 5f2:	08 95       	ret

000005f4 <__mulsf3>:
 5f4:	0e 94 0d 03 	call	0x61a	; 0x61a <__mulsf3x>
 5f8:	0c 94 c0 02 	jmp	0x580	; 0x580 <__fp_round>
 5fc:	0e 94 b2 02 	call	0x564	; 0x564 <__fp_pscA>
 600:	38 f0       	brcs	.+14     	; 0x610 <__mulsf3+0x1c>
 602:	0e 94 b9 02 	call	0x572	; 0x572 <__fp_pscB>
 606:	20 f0       	brcs	.+8      	; 0x610 <__mulsf3+0x1c>
 608:	95 23       	and	r25, r21
 60a:	11 f0       	breq	.+4      	; 0x610 <__mulsf3+0x1c>
 60c:	0c 94 a9 02 	jmp	0x552	; 0x552 <__fp_inf>
 610:	0c 94 af 02 	jmp	0x55e	; 0x55e <__fp_nan>
 614:	11 24       	eor	r1, r1
 616:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__fp_szero>

0000061a <__mulsf3x>:
 61a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <__fp_split3>
 61e:	70 f3       	brcs	.-36     	; 0x5fc <__mulsf3+0x8>

00000620 <__mulsf3_pse>:
 620:	95 9f       	mul	r25, r21
 622:	c1 f3       	breq	.-16     	; 0x614 <__mulsf3+0x20>
 624:	95 0f       	add	r25, r21
 626:	50 e0       	ldi	r21, 0x00	; 0
 628:	55 1f       	adc	r21, r21
 62a:	62 9f       	mul	r22, r18
 62c:	f0 01       	movw	r30, r0
 62e:	72 9f       	mul	r23, r18
 630:	bb 27       	eor	r27, r27
 632:	f0 0d       	add	r31, r0
 634:	b1 1d       	adc	r27, r1
 636:	63 9f       	mul	r22, r19
 638:	aa 27       	eor	r26, r26
 63a:	f0 0d       	add	r31, r0
 63c:	b1 1d       	adc	r27, r1
 63e:	aa 1f       	adc	r26, r26
 640:	64 9f       	mul	r22, r20
 642:	66 27       	eor	r22, r22
 644:	b0 0d       	add	r27, r0
 646:	a1 1d       	adc	r26, r1
 648:	66 1f       	adc	r22, r22
 64a:	82 9f       	mul	r24, r18
 64c:	22 27       	eor	r18, r18
 64e:	b0 0d       	add	r27, r0
 650:	a1 1d       	adc	r26, r1
 652:	62 1f       	adc	r22, r18
 654:	73 9f       	mul	r23, r19
 656:	b0 0d       	add	r27, r0
 658:	a1 1d       	adc	r26, r1
 65a:	62 1f       	adc	r22, r18
 65c:	83 9f       	mul	r24, r19
 65e:	a0 0d       	add	r26, r0
 660:	61 1d       	adc	r22, r1
 662:	22 1f       	adc	r18, r18
 664:	74 9f       	mul	r23, r20
 666:	33 27       	eor	r19, r19
 668:	a0 0d       	add	r26, r0
 66a:	61 1d       	adc	r22, r1
 66c:	23 1f       	adc	r18, r19
 66e:	84 9f       	mul	r24, r20
 670:	60 0d       	add	r22, r0
 672:	21 1d       	adc	r18, r1
 674:	82 2f       	mov	r24, r18
 676:	76 2f       	mov	r23, r22
 678:	6a 2f       	mov	r22, r26
 67a:	11 24       	eor	r1, r1
 67c:	9f 57       	subi	r25, 0x7F	; 127
 67e:	50 40       	sbci	r21, 0x00	; 0
 680:	9a f0       	brmi	.+38     	; 0x6a8 <__mulsf3_pse+0x88>
 682:	f1 f0       	breq	.+60     	; 0x6c0 <__mulsf3_pse+0xa0>
 684:	88 23       	and	r24, r24
 686:	4a f0       	brmi	.+18     	; 0x69a <__mulsf3_pse+0x7a>
 688:	ee 0f       	add	r30, r30
 68a:	ff 1f       	adc	r31, r31
 68c:	bb 1f       	adc	r27, r27
 68e:	66 1f       	adc	r22, r22
 690:	77 1f       	adc	r23, r23
 692:	88 1f       	adc	r24, r24
 694:	91 50       	subi	r25, 0x01	; 1
 696:	50 40       	sbci	r21, 0x00	; 0
 698:	a9 f7       	brne	.-22     	; 0x684 <__mulsf3_pse+0x64>
 69a:	9e 3f       	cpi	r25, 0xFE	; 254
 69c:	51 05       	cpc	r21, r1
 69e:	80 f0       	brcs	.+32     	; 0x6c0 <__mulsf3_pse+0xa0>
 6a0:	0c 94 a9 02 	jmp	0x552	; 0x552 <__fp_inf>
 6a4:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__fp_szero>
 6a8:	5f 3f       	cpi	r21, 0xFF	; 255
 6aa:	e4 f3       	brlt	.-8      	; 0x6a4 <__mulsf3_pse+0x84>
 6ac:	98 3e       	cpi	r25, 0xE8	; 232
 6ae:	d4 f3       	brlt	.-12     	; 0x6a4 <__mulsf3_pse+0x84>
 6b0:	86 95       	lsr	r24
 6b2:	77 95       	ror	r23
 6b4:	67 95       	ror	r22
 6b6:	b7 95       	ror	r27
 6b8:	f7 95       	ror	r31
 6ba:	e7 95       	ror	r30
 6bc:	9f 5f       	subi	r25, 0xFF	; 255
 6be:	c1 f7       	brne	.-16     	; 0x6b0 <__mulsf3_pse+0x90>
 6c0:	fe 2b       	or	r31, r30
 6c2:	88 0f       	add	r24, r24
 6c4:	91 1d       	adc	r25, r1
 6c6:	96 95       	lsr	r25
 6c8:	87 95       	ror	r24
 6ca:	97 f9       	bld	r25, 7
 6cc:	08 95       	ret

000006ce <__udivmodsi4>:
 6ce:	a1 e2       	ldi	r26, 0x21	; 33
 6d0:	1a 2e       	mov	r1, r26
 6d2:	aa 1b       	sub	r26, r26
 6d4:	bb 1b       	sub	r27, r27
 6d6:	fd 01       	movw	r30, r26
 6d8:	0d c0       	rjmp	.+26     	; 0x6f4 <__udivmodsi4_ep>

000006da <__udivmodsi4_loop>:
 6da:	aa 1f       	adc	r26, r26
 6dc:	bb 1f       	adc	r27, r27
 6de:	ee 1f       	adc	r30, r30
 6e0:	ff 1f       	adc	r31, r31
 6e2:	a2 17       	cp	r26, r18
 6e4:	b3 07       	cpc	r27, r19
 6e6:	e4 07       	cpc	r30, r20
 6e8:	f5 07       	cpc	r31, r21
 6ea:	20 f0       	brcs	.+8      	; 0x6f4 <__udivmodsi4_ep>
 6ec:	a2 1b       	sub	r26, r18
 6ee:	b3 0b       	sbc	r27, r19
 6f0:	e4 0b       	sbc	r30, r20
 6f2:	f5 0b       	sbc	r31, r21

000006f4 <__udivmodsi4_ep>:
 6f4:	66 1f       	adc	r22, r22
 6f6:	77 1f       	adc	r23, r23
 6f8:	88 1f       	adc	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	1a 94       	dec	r1
 6fe:	69 f7       	brne	.-38     	; 0x6da <__udivmodsi4_loop>
 700:	60 95       	com	r22
 702:	70 95       	com	r23
 704:	80 95       	com	r24
 706:	90 95       	com	r25
 708:	9b 01       	movw	r18, r22
 70a:	ac 01       	movw	r20, r24
 70c:	bd 01       	movw	r22, r26
 70e:	cf 01       	movw	r24, r30
 710:	08 95       	ret

00000712 <_exit>:
 712:	f8 94       	cli

00000714 <__stop_program>:
 714:	ff cf       	rjmp	.-2      	; 0x714 <__stop_program>
